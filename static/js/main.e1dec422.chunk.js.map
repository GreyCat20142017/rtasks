{"version":3,"sources":["constants.js","components/loader/Loader.jsx","components/table/Table.jsx","components/filter/Filter.jsx","components/details/Details.jsx","apps/AppTable.jsx","apps/AppSome.jsx","components/AppSwitcher.jsx","App.js","serviceWorker.js","index.js","components/loader/logo.svg"],"names":["KEYCODES","TASKS","MAIN","title","component","comment","TABLE","SOME","TASKS_ORDER","DATA_URLS","SMALL","name","url","BIG","TEST","SORT_DIRECTIONS","Loader","className","src","logo","witdh","height","alt","SortIndicator","currentColumn","sortField","sortDirection","onDirectionChange","arrow","aria-hidden","onClick","TableRow","row","ind","columns","onRowClick","key","map","column","Table","data","onTableSort","rest","Array","isArray","length","Object","keys","noData","Fragment","cellSpacing","width","id","pageCount","previousLabel","nextLabel","breakLabel","onPageChange","paginationPage","selected","forcePage","currentPage","containerClassName","pageClassName","pageLinkClassName","previousLinkClassName","nextLinkClassName","disabledClassName","activeClassName","Filter","onFilterApply","useState","inputValue","setInputValue","htmlFor","trim","value","type","onChange","evt","target","onKeyDown","keyCode","preventDefault","role","aria-label","Details","details","unsetDetails","useEffect","document","addEventListener","removeEventListener","item","getPreparedData","content","filterValue","chunk","filter","itemObject","pattern","reduce","rv","current","toLowerCase","includes","AppTable","props","isLoading","setIsLoading","setContent","wasError","setWasError","setFilterValue","setCurrentPage","setSortField","setSortDirection","currentDetails","setCurrentDetails","preparedData","basicReset","canceled","fetch","then","response","json","defaultSortField","orderBy","catch","error","getData","page","rowData","AppASome","AppSwitcher","AppSome","App","task","setTask","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.e1dec422.chunk.js","sourcesContent":["// const course = 'book';\n// const lesson = 77;\n\nexport const KEYCODES = {\n    ENTER: 13,\n    ESC: 27\n};\n\nexport const TASKS = {\n    MAIN: {\n        title: 'главная',\n        component: null,\n        comment: 'Тренировка на котиках. React (CRA), hooks, react-paginate, lodash, MDB'\n    },\n    TABLE: {\n        title: 'таблица с данными', component: 'AppTable',\n        comment: 'Получение данных, сортировка, фильтрация, пагинация, вывод детальной информации по строке таблицы.'\n    },\n    SOME: {title: 'что-то еще', component: 'AppSome', comment: 'Что-то будет когда-то'}\n};\n\nexport const TASKS_ORDER = [TASKS.MAIN, TASKS.TABLE, TASKS.SOME];\n\nexport const DATA_URLS = {\n    SMALL: {\n        name: '20 слов',\n        url: 'https://greycat20142017.github.io/pseudodb/rtasks20.json',\n        title: 'Данные из удаленного источника. Могут быть временно недоступны.'\n    },\n    BIG: {\n        name: '200 слов',\n        url: 'https://greycat20142017.github.io/pseudodb/rtasks200.json',\n        title: 'Данные из удаленного источника. Могут быть временно недоступны.'\n    },\n    TEST: {\n        name: 'тест', url: '/data/test.json',\n        title: 'Тестовые данные из папки приложения.'\n    }\n};\n\n\nexport const SORT_DIRECTIONS = {\n    ASC: 'asc',\n    DESC: 'desc'\n};\n\nexport const PAGE_LIMIT = 10;","import React from 'react';\n\nimport logo from './logo.svg';\nimport './loader.css';\n\nconst Loader = () => (\n     <div className='mx-auto'>\n        <img  className='loader' src={logo}  witdh='80' height='80' alt='logo' />\n        <small className='mdb-color-text'>Данные загружаются...</small>\n    </div>\n);\n\nexport default Loader;","import React from 'react';\nimport ReactPaginate from 'react-paginate';\n\nimport {SORT_DIRECTIONS} from '../../constants';\n\nconst SortIndicator = ({currentColumn, sortField, sortDirection, onDirectionChange}) => {\n    const arrow = sortDirection === SORT_DIRECTIONS.ASC ?\n        <h5 className='font-weight-bold d-inline ml-2' aria-hidden='true' onClick={onDirectionChange}>&uarr;</h5> :\n        <h5 className='font-weight-bold d-inline ml-2' aria-hidden='true' onClick={onDirectionChange}>&darr;</h5>;\n    return (currentColumn === sortField) ? arrow : null;\n};\n\nconst TableRow = ({row, ind, columns, onRowClick}) => (\n    <tr className='cursor-pointer' key={ind} title='Клик - для просмотра детальной информации'\n        onClick={() => onRowClick(row)}>{columns.map(column =>\n        <td key={column + ind}>{row[column]}</td>)}\n    </tr>\n);\n\nconst Table = ({data, onTableSort, ...rest}) => {\n    const columns = Array.isArray(data) && data.length > 0 ? Object.keys(data[0]) : [];\n    const noData = !(columns.length > 0 && data.length > 0);\n\n    const onPageChange = (paginationPage) => (rest.onPageChange(paginationPage.selected));\n\n    return (\n        noData ? <p className='text-mdb-color py-2'><small>Нет данных для вывода в таблицу</small></p> :\n            <React.Fragment>\n                <table className='table table-sm table-striped table-bordered my-3' cellSpacing='1' width='100%'\n                       id='idTable'>\n                    <thead>\n                    <tr>\n                        {columns.map(column =>\n                            <th className='th-sm font-weight-bold mdb-color text-white cursor-pointer'\n                                key={column + 'th'} onClick={() => onTableSort(column)}>\n                                {column}\n                                <SortIndicator currentColumn={column} {...rest}/>\n                            </th>)\n                        }\n                    </tr>\n                    </thead>\n                    <tbody>\n                    {data.map((row, ind) =>\n                        <TableRow key={ind} row={row} ind={ind} columns={columns} onRowClick={rest.onRowClick}/>\n                    )}\n                    </tbody>\n                </table>\n\n                {noData || rest.pageCount < 2 ? null :\n                    <ReactPaginate\n                        previousLabel={<span>&lArr;</span>}\n                        nextLabel={<span>&rArr;</span>}\n                        breakLabel={<span className='gap'>...</span>}\n                        pageCount={rest.pageCount}\n                        onPageChange={onPageChange}\n                        forcePage={rest.currentPage}\n                        containerClassName={'pagination'}\n                        pageClassName={'page-item'}\n                        pageLinkClassName={'page-link'}\n                        previousLinkClassName={'page-link mdb-color-text'}\n                        nextLinkClassName={'page-link mdb-color-text'}\n                        disabledClassName={'disabled'}\n                        activeClassName={'active'}\n                    />\n                }\n            </React.Fragment>\n\n    );\n};\n\nexport default Table;","import React, {useState} from 'react';\nimport {KEYCODES} from '../../constants';\n\nconst Filter = ({onFilterApply}) => {\n    const [inputValue, setInputValue] = useState('');\n\n    const onKeyPress = (evt) => {\n        if (evt.keyCode === KEYCODES.ENTER) {\n            evt.preventDefault();\n            onFilterApply(evt.target.value);\n        }\n    };\n\n    return (\n        <div className='md-form d-flex align-items-baseline my-1'>\n            <label htmlFor='idFilter'>{inputValue.trim() === '' ? 'Текст для поиска' : ''}</label>\n            <input className='form-control' value={inputValue}\n                   type='text' id='idFilter' onChange={(evt) => setInputValue(evt.target.value)}\n                   onKeyDown={onKeyPress}/>\n            <div className='btn-group' role='group' aria-label='группа кнопок'>\n                <button className={'btn btn-mdb-color btn-sm'} type='button' onClick={() => onFilterApply(inputValue)}\n                        title='выполнить поиск подстроки во всех полях таблицы'>\n                    поиск\n                </button>\n                <button className={'btn btn-mdb-color btn-sm ml-1'} type='button' onClick={() => setInputValue('')}\n                        title='сбросить выражение поиска'>\n                    &#10008;<span className='visually-hidden'>сбросить</span>\n                </button>\n            </div>\n        </div>\n    );\n};\n\nexport default Filter;","import React, {useEffect} from 'react';\nimport {KEYCODES} from '../../constants';\n\nconst Details = ({details, unsetDetails}) => {\n    const columns = Object.keys(details);\n\n    const onKeyDown = (evt) => {\n        if (evt.keyCode === KEYCODES.ESC) {\n            evt.preventDefault();\n            unsetDetails();\n        }\n    };\n\n    useEffect(() => {\n        document.addEventListener('keydown', onKeyDown);\n        return () => document.removeEventListener('keydown', onKeyDown);\n    });\n\n    return (details ?\n            <React.Fragment>\n                <div className='mt-4 p-3 shadow-lg'>\n                    <h5 className='text-center my-3'>Информация о выбранной записи:</h5>\n                    <table className='table table-sm table-bordered'>\n                        <thead>\n                        <tr>\n                            <th className='th-sm font-weight-bold mdb-color text-white '>Название поля</th>\n                            <th className='th-sm font-weight-bold mdb-color text-white '>Значение</th>\n                        </tr>\n                        </thead>\n                        <tbody>\n                        {columns.map((item, ind) => (\n                            <tr key={ind}>\n                                <td>{item}\n                                </td>\n                                <td>{details[item]}</td>\n                            </tr>\n                        ))}\n                        </tbody>\n                    </table>\n                    <button className='btn btn-sm btn-mdb-color' onClick={unsetDetails} type={'button'}>назад</button>\n                </div>\n            </React.Fragment> : null\n    );\n};\n\nexport default Details;","import React, {useState} from 'react';\nimport {orderBy, chunk} from 'lodash';\n\nimport Loader from '../components/loader/Loader';\nimport Table from '../components/table/Table';\nimport Filter from '../components/filter/Filter';\nimport {DATA_URLS, PAGE_LIMIT, SORT_DIRECTIONS} from '../constants';\nimport Details from '../components/details/Details';\n\nconst containsPattern = (itemObject, pattern) => (\n    Object.keys(itemObject).reduce((rv, current) => (rv || itemObject[current].toLowerCase().includes(pattern.toLowerCase())), false)\n);\n\nconst getPreparedData = (content, sortField, sortDirection, filterValue) => (\n    chunk(content.filter(item => containsPattern(item, filterValue)), PAGE_LIMIT)\n);\n\nconst AppTable = (props) => {\n    const [isLoading, setIsLoading] = useState(false);\n    const [content, setContent] = useState([]);\n    const [wasError, setWasError] = useState(false);\n    const [filterValue, setFilterValue] = useState('');\n    const [currentPage, setCurrentPage] = useState(0);\n    const [sortField, setSortField] = useState('');\n    const [sortDirection, setSortDirection] = useState(SORT_DIRECTIONS.ASC);\n    const [currentDetails, setCurrentDetails] = useState(null);\n    const preparedData = getPreparedData([...content], sortField, sortDirection, filterValue);\n\n    const basicReset = () => {\n        setCurrentPage(0);\n        setCurrentDetails(null);\n        setFilterValue('');\n        setIsLoading(false);\n    };\n\n    const getData = (url, canceled = false) => {\n        setIsLoading(true);\n        setWasError(false);\n        fetch(url)\n            .then(response => response.json())\n            .then(data => {\n                if (!canceled) {\n                    const defaultSortField = data.content.length > 0 && Object.keys(data.content[0]).length > 0 ?\n                        Object.keys(data.content[0])[0] : '';\n                    setContent(orderBy([...data.content], defaultSortField, sortDirection));\n                    setWasError(false);\n                    setSortField(defaultSortField);\n                    basicReset();\n                }\n            })\n            .catch(error => {\n                if (!canceled) {\n                    setWasError(true);\n                    setContent([]);\n                    basicReset();\n                }\n            });\n    };\n\n    const onTableSort = (column) => (setSortField(column));\n\n    const onPageChange = (page) => (setCurrentPage(page));\n\n    const onRowClick = (rowData) => (setCurrentDetails(rowData));\n\n    const onDirectionChange = () => (\n        setSortDirection(sortDirection === SORT_DIRECTIONS.ASC ? SORT_DIRECTIONS.DESC : SORT_DIRECTIONS.ASC)\n    );\n\n    const onFilterApply = (value) => {\n        setFilterValue(value);\n        setCurrentPage(0);\n    };\n\n    return (\n        <div>\n            <h4 className='py-3 mdb-color-text'>Таблица с данными (AppTable)</h4>\n            <div className=\"btn-group\" role=\"group\" aria-label=\"Получение данных\">\n                {Object.keys(DATA_URLS).map(item => (\n                    <button className=\"btn btn-sm btn-outline-mdb-color\" key={item}\n                            onClick={() => getData(DATA_URLS[item].url)}\n                            title={DATA_URLS[item].title}>\n                        {DATA_URLS[item].name}\n                    </button>\n                ))}\n            </div>\n            {wasError ? <p className='p-2 text-danger'>Ошибка при загрузке данных.</p> : null}\n            {isLoading ?\n                <Loader/> :\n                currentDetails ? <Details details={currentDetails} unsetDetails={() => setCurrentDetails(null)}/> :\n                    <React.Fragment>\n                        {content.length > 0 ? <Filter onFilterApply={onFilterApply}/> : null}\n                        <Table\n                            data={preparedData.length > 0 ? orderBy([...preparedData[currentPage]], sortField, sortDirection) : []}\n                            currentPage={currentPage} onPageChange={onPageChange} pageCount={preparedData.length}\n                            sortField={sortField} sortDirection={sortDirection}\n                            onTableSort={onTableSort} onDirectionChange={onDirectionChange} onRowClick={onRowClick}/>\n\n                    </React.Fragment>\n            }\n        </div>\n    );\n};\n\nexport default AppTable;","import React from 'react';\n\nconst AppASome = (props) => (\n    <div>\n        <h3>AppSome</h3>\n    </div>\n);\n\nexport default AppASome;","import React from 'react';\nimport {TASKS} from '../constants';\nimport AppTable from '../apps/AppTable';\nimport AppSome from '../apps/AppSome';\n\nconst AppSwitcher = ({component}) => {\n    let rv = null;\n    switch (component) {\n        case TASKS.SOME: {\n            rv = <AppSome/>;\n            break;\n        }\n        case TASKS.TABLE: {\n            rv = <AppTable/>;\n            break;\n        }\n        default:\n            rv = <React.Fragment>\n                    <p className='mt-3'>Просто найденные на просторах интернета задания по React. </p>\n                    <p>Без какой-либо общей идеи и реальной цели.</p>\n                    <p>Исключительно для внесения разнообразия в учебные задачи.</p>\n                </React.Fragment>;\n    }\n    return rv;\n};\n\nexport default AppSwitcher;","import React, {useState} from 'react';\n\nimport AppSwitcher from './components/AppSwitcher';\nimport {TASKS_ORDER} from './constants';\n\nfunction App() {\n    const [task, setTask] = useState(0);\n    return (\n        <div className=\"container py-3\">\n            <div className='col-12 col-md-8 mx-auto text-center'>\n\n                <header>\n                    <h3 className='text-center'>Разные задачи c использованием React</h3>\n\n                    {TASKS_ORDER.map((item, ind) =>\n                        <button className={'btn btn-mdb-color' + (ind === task ? 'active' : '')} key={ind} type='button'\n                                title={TASKS_ORDER[ind]['comment']}\n                                onClick={() => setTask(ind)}>{TASKS_ORDER[ind]['title']}</button>\n                    )}\n\n                    <hr/>\n                    <p><small>{TASKS_ORDER[task]['comment']}</small></p>\n                    <hr/>\n                </header>\n\n                <main>\n                    <AppSwitcher component={TASKS_ORDER[task]}/>\n                </main>\n\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './mdbcss/bootstrap.min.css';\nimport './mdbcss/mdb.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.0d9b647f.svg\";"],"sourceRoot":""}