{"version":3,"sources":["common/loader/logo.svg","constants.js","common/loader/Loader.jsx","apptable/tableconstants.js","apptable/table/Table.jsx","apptable/filter/Filter.jsx","common/simpletable/SimpleTable.jsx","common/details/Details.jsx","apptable/AppTable.jsx","common/dropdown/DropDownHook.jsx","appchart/chartconstants.js","appchart/chartfunctions.js","appchart/chart/SimpleChart.jsx","appchart/form/GitUserForm.jsx","appchart/AppChart.jsx","errorboundary/ErrorBoundary.jsx","AppSwitcher.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","KEYCODES","TASKS","MAIN","title","component","comment","TABLE","CHART","MAP","TASKS_ORDER","Loader","className","src","logo","witdh","height","alt","DATA_URLS","SMALL","name","url","BIG","TEST","SORT_DIRECTIONS","SortIndicator","currentColumn","sortField","sortDirection","onDirectionChange","arrow","aria-hidden","onClick","TableRow","row","ind","columns","onRowClick","key","map","column","Table","data","onTableSort","rest","Array","isArray","length","Object","keys","noData","Fragment","cellSpacing","width","id","pageCount","previousLabel","nextLabel","breakLabel","onPageChange","paginationPage","selected","forcePage","currentPage","containerClassName","pageClassName","pageLinkClassName","previousLinkClassName","nextLinkClassName","disabledClassName","activeClassName","Filter","onFilterApply","useState","inputValue","setInputValue","htmlFor","trim","value","type","onChange","evt","target","onKeyDown","keyCode","preventDefault","role","aria-label","DetailsHeader","ObjectRows","details","item","ArrayRows","controlColumns","control","index","Control","callback","getControl","SimpleTable","noHeader","Details","unsetDetails","useEffect","document","addEventListener","removeEventListener","getPreparedData","content","filterValue","chunk","filter","itemObject","pattern","reduce","rv","current","toLowerCase","includes","AppTable","props","isLoading","setIsLoading","setContent","wasError","setWasError","setFilterValue","setCurrentPage","setSortField","setSortDirection","currentDetails","setCurrentDetails","preparedData","basicReset","canceled","fetch","then","response","json","defaultSortField","orderBy","catch","error","getData","page","rowData","LinkDrop","link","css","clickHandler","linkCss","href","text","ButtonDrop","DropDown","togglerText","ariaInfo","dropdownSet","togglerCss","isOpen","setIsOpen","toggleContainer","useRef","timeOutId","dropOpenedClass","links","onClickOutsideHandler","onKeyPress","onClickHandler","onButtonClickHandler","contains","ref","onBlur","setTimeout","onFocus","clearTimeout","data-toggle","aria-haspopup","aria-expanded","aria-labelledby","GIT_URLS","PHPTEST","reposUrl","userUrl","CHART_COLORS","CHART_TYPES","BAR","PIE","DOUGHNUT","GIT_TYPES","GIT_LINK_PARTS","isDigit","str","match","getIsAcademy","parseRepoInfo","repo","isAcademy","html_url","parsedName","academyId","project","intensiveNumber","splitted","split","join","first","middle","slice","last","parseName","description","homepage","language","transformUserData","login","reposCount","public_repos","profile","transformReposData","getTotals","totalField","totals","fieldName","forEach","labels","label","getTotalsField","user","chart","SimpleChart","chartTitle","chartFooter","onLegendClick","hidden","chartType","setChartType","canvas","chartData","sourceData","colors","datasets","backgroundColor","borderColor","color","substring","lastIndexOf","borderWidth","options","scales","yAxes","ticks","beginAtZero","parseInt","transformToChartData","drawChart","operations","ctx","getContext","destroy","Chart","assign","GitUserForm","onGitUserClick","placeholder","getPagesUrls","tmpUser","isGitData","pages","totalCount","totalPages","Math","ceil","i","repoUrl","push","AppChart","repos","onError","errorMessage","userData","Promise","all","results","jointData","result","userName","something","fields","getDetailsFields","filterField","field","totalDetails","uniqueIdCount","v","a","indexOf","aboutId","ErrorBoundary","state","this","setState","children","React","Component","AppSwitcher","disabled","App","task","setTask","Boolean","window","location","hostname","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.58fceab4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.0d9b647f.svg\";","export const KEYCODES = {\n    ENTER: 13,\n    ESC: 27\n};\n\nexport const TASKS = {\n    MAIN: {\n        title: 'главная',\n        component: null,\n        comment: 'Тренировка на котиках. React (CRA), hooks, react-paginate, lodash, chart.js, MDB'\n    },\n    TABLE: {\n        title: 'таблица с данными', component: 'AppTable',\n        comment: 'Получение данных, сортировка, фильтрация, пагинация, вывод детальной информации по строке таблицы.'\n    },\n    CHART: {title: 'ChartJS', component: 'AppChart', comment: 'Диаграмма по данным GitHub'},\n    MAP: {title: 'карта', component: 'AppMap', comment: 'Карта c маршрутом'}\n};\n\nexport const TASKS_ORDER = [TASKS.MAIN, TASKS.TABLE, TASKS.CHART, TASKS.MAP];","import React from 'react';\n\nimport logo from './logo.svg';\nimport './loader.css';\n\nconst Loader = () => (\n     <div className='mx-auto'>\n        <img  className='loader' src={logo}  witdh='80' height='80' alt='logo' />\n        <small className='mdb-color-text'>Данные загружаются...</small>\n    </div>\n);\n\nexport default Loader;","export const DATA_URLS = {\n    SMALL: {\n        name: '20 слов',\n        url: 'https://greycat20142017.github.io/pseudodb/rtasks20.json',\n        title: 'Данные из удаленного источника. Могут быть временно недоступны.'\n    },\n    BIG: {\n        name: '200 слов',\n        url: 'https://greycat20142017.github.io/pseudodb/rtasks200.json',\n        title: 'Данные из удаленного источника. Могут быть временно недоступны.'\n    },\n    TEST: {\n        name: 'тест', url: '/data/test.json',\n        title: 'Тестовые данные из папки приложения.'\n    }\n};\nexport const SORT_DIRECTIONS = {\n    ASC: 'asc',\n    DESC: 'desc'\n};\n\nexport const PAGE_LIMIT = 10;","import React from 'react';\nimport ReactPaginate from 'react-paginate';\n\nimport {SORT_DIRECTIONS} from '../tableconstants';\n\nconst SortIndicator = ({currentColumn, sortField, sortDirection, onDirectionChange}) => {\n    const arrow = sortDirection === SORT_DIRECTIONS.ASC ?\n        <h5 className='font-weight-bold d-inline ml-2' aria-hidden='true' onClick={onDirectionChange}>&uarr;</h5> :\n        <h5 className='font-weight-bold d-inline ml-2' aria-hidden='true' onClick={onDirectionChange}>&darr;</h5>;\n    return (currentColumn === sortField) ? arrow : null;\n};\n\nconst TableRow = ({row, ind, columns, onRowClick}) => (\n    <tr className='cursor-pointer' key={ind} title='Клик - для просмотра детальной информации'\n        onClick={() => onRowClick(row)}>{columns.map(column =>\n        <td key={column + ind}>{row[column]}</td>)}\n    </tr>\n);\n\nconst Table = ({data, onTableSort, ...rest}) => {\n    const columns = Array.isArray(data) && data.length > 0 ? Object.keys(data[0]) : [];\n    const noData = !(columns.length > 0 && data.length > 0);\n\n    const onPageChange = (paginationPage) => (rest.onPageChange(paginationPage.selected));\n\n    return (\n        noData ? <p className='text-mdb-color py-2'><small>Нет данных для вывода в таблицу</small></p> :\n            <React.Fragment>\n                <table className='table table-sm table-striped table-bordered my-3' cellSpacing='1' width='100%'\n                       id='idTable'>\n                    <thead>\n                    <tr>\n                        {columns.map(column =>\n                            <th className='th-sm font-weight-bold mdb-color text-white cursor-pointer'\n                                key={column + 'th'} onClick={() => onTableSort(column)}>\n                                {column}\n                                <SortIndicator currentColumn={column} {...rest}/>\n                            </th>)\n                        }\n                    </tr>\n                    </thead>\n                    <tbody>\n                    {data.map((row, ind) =>\n                        <TableRow key={ind} row={row} ind={ind} columns={columns} onRowClick={rest.onRowClick}/>\n                    )}\n                    </tbody>\n                </table>\n\n                {noData || rest.pageCount < 2 ? null :\n                    <ReactPaginate\n                        previousLabel={<span>&lArr;</span>}\n                        nextLabel={<span>&rArr;</span>}\n                        breakLabel={<span className='gap'>...</span>}\n                        pageCount={rest.pageCount}\n                        onPageChange={onPageChange}\n                        forcePage={rest.currentPage}\n                        containerClassName={'pagination'}\n                        pageClassName={'page-item'}\n                        pageLinkClassName={'page-link'}\n                        previousLinkClassName={'page-link mdb-color-text'}\n                        nextLinkClassName={'page-link mdb-color-text'}\n                        disabledClassName={'disabled'}\n                        activeClassName={'active'}\n                    />\n                }\n            </React.Fragment>\n\n    );\n};\n\nexport default Table;","import React, {useState} from 'react';\nimport {KEYCODES} from '../../constants';\n\nconst Filter = ({onFilterApply}) => {\n    const [inputValue, setInputValue] = useState('');\n\n    const onKeyPress = (evt) => {\n        if (evt.keyCode === KEYCODES.ENTER) {\n            evt.preventDefault();\n            onFilterApply(evt.target.value);\n        }\n    };\n\n    return (\n        <div className='md-form d-flex align-items-baseline mt-3 mb-2'>\n            <label htmlFor='idFilter'>{inputValue.trim() === '' ? 'Текст для поиска' : ''}</label>\n            <input className='form-control' value={inputValue}\n                   type='text' id='idFilter' onChange={(evt) => setInputValue(evt.target.value)}\n                   onKeyDown={onKeyPress}/>\n            <div className='btn-group' role='group' aria-label='группа кнопок'>\n                <button className={'btn btn-mdb-color btn-sm'} type='button' onClick={() => onFilterApply(inputValue)}\n                        title='выполнить поиск подстроки во всех полях таблицы'>\n                    поиск\n                </button>\n                <button className={'btn btn-mdb-color btn-sm ml-1'} type='button' onClick={() => setInputValue('')}\n                        title='сбросить выражение поиска'>\n                    &#10008;<span className='visually-hidden'>сбросить</span>\n                </button>\n            </div>\n        </div>\n    );\n};\n\nexport default Filter;","import React from 'react';\n\nconst getControl = (Control, callback, ind) => (<Control callback={callback} ind={ind}/>);\n\nexport const DetailsHeader = ({isArray}) => (isArray ?\n        <tr>\n            <th className='th-sm font-weight-bold mdb-color text-white'>Список</th>\n        </tr> :\n        <tr>\n            <th className='th-sm font-weight-bold mdb-color text-white'>Название поля</th>\n            <th className='th-sm font-weight-bold mdb-color text-white'>Значение</th>\n        </tr>\n);\n\nexport const ObjectRows = ({details}) => {\n    const columns = Array.isArray(details) ? details : Object.keys(details);\n    return (\n        <React.Fragment>\n            {columns.map((item, ind) => (\n                <tr key={ind}>\n                    <td>{item}\n                    </td>\n                    <td>{details[item]}</td>\n                </tr>\n            ))}\n        </React.Fragment>);\n};\n\nexport const ArrayRows = ({details, controlColumns = []}) => {\n\n    return (\n        <React.Fragment>\n            {details.map((item, ind) => (\n                <tr key={ind}>\n                    <td>{item}</td>\n                    {controlColumns.map((control, index) =>\n                        <td key={index}>\n                            {getControl(control.Control, control.callback, ind)}\n                        </td>)}\n                </tr>\n            ))}\n        </React.Fragment>);\n};\n\nconst SimpleTable = ({details, noHeader = false, controlColumns = []}) => (\n    <table className='table table-sm table-bordered'>\n        <thead>\n        {noHeader ? null : <DetailsHeader isArray={Array.isArray(details)}/>}\n        </thead>\n        <tbody>\n        {Array.isArray(details) ?\n            <ArrayRows details={details} controlColumns={controlColumns}/> :\n            <ObjectRows details={details}/>}\n        </tbody>\n    </table>\n);\n\nexport default SimpleTable;\n\n","import React, {useEffect} from 'react';\nimport {KEYCODES} from '../../constants';\nimport SimpleTable from '../simpletable/SimpleTable';\n\n/**\n * @param details - Объект или массив строк\n * @param unsetDetails - Функция, изменяющая состояние модального окна с таблицей\n */\n\nconst Details = ({details, unsetDetails, title = 'Информация о выбранной записи:'}) => {\n\n    const onKeyDown = (evt) => {\n        if (evt.keyCode === KEYCODES.ESC) {\n            evt.preventDefault();\n            unsetDetails();\n        }\n    };\n\n    useEffect(() => {\n        document.addEventListener('keydown', onKeyDown);\n        return () => document.removeEventListener('keydown', onKeyDown);\n    });\n\n    return (details ?\n            <React.Fragment>\n                <div className='mt-4 p-3 shadow-lg fixed-bottom h-100 bg-white'>\n                    <button className='btn btn-sm btn-mdb-color' onClick={unsetDetails} type={'button'}\n                            title='Для возврата к предыдущему экрану - Еsc'>\n                        выйти из просмотра подробностей\n                    </button>\n                    <h5 className='text-center my-3'>{title}</h5>\n                    <div className='overflow-auto h-100'>\n                        <SimpleTable details={details}/>\n                    </div>\n\n                </div>\n            </React.Fragment>\n            : null\n    );\n};\n\nexport default Details;","import React, {useState} from 'react';\nimport {orderBy, chunk} from 'lodash';\n\nimport Loader from '../common/loader/Loader';\nimport Table from './table/Table';\nimport Filter from './filter/Filter';\nimport Details from '../common/details/Details';\nimport {DATA_URLS, PAGE_LIMIT, SORT_DIRECTIONS} from './tableconstants';\n\nconst containsPattern = (itemObject, pattern) => (\n    Object.keys(itemObject).reduce((rv, current) => (rv || itemObject[current].toLowerCase().includes(pattern.toLowerCase())), false)\n);\n\nconst getPreparedData = (content, sortField, sortDirection, filterValue) => (\n    chunk(content.filter(item => containsPattern(item, filterValue)), PAGE_LIMIT)\n);\n\nconst AppTable = (props) => {\n    const [isLoading, setIsLoading] = useState(false);\n    const [content, setContent] = useState([]);\n    const [wasError, setWasError] = useState(false);\n    const [filterValue, setFilterValue] = useState('');\n    const [currentPage, setCurrentPage] = useState(0);\n    const [sortField, setSortField] = useState('');\n    const [sortDirection, setSortDirection] = useState(SORT_DIRECTIONS.ASC);\n    const [currentDetails, setCurrentDetails] = useState(null);\n    const preparedData = getPreparedData([...content], sortField, sortDirection, filterValue);\n\n    const basicReset = () => {\n        setCurrentPage(0);\n        setCurrentDetails(null);\n        setFilterValue('');\n        setIsLoading(false);\n    };\n\n    const getData = (url, canceled = false) => {\n        setIsLoading(true);\n        setWasError(false);\n        fetch(url)\n            .then(response => response.json())\n            .then(data => {\n                if (!canceled) {\n                    const defaultSortField = data.content.length > 0 && Object.keys(data.content[0]).length > 0 ?\n                        Object.keys(data.content[0])[0] : '';\n                    setContent(orderBy([...data.content], defaultSortField, sortDirection));\n                    setWasError(false);\n                    setSortField(defaultSortField);\n                    basicReset();\n                }\n            })\n            .catch(error => {\n                if (!canceled) {\n                    setWasError(true);\n                    setContent([]);\n                    basicReset();\n                }\n            });\n    };\n\n    const onTableSort = (column) => (setSortField(column));\n\n    const onPageChange = (page) => (setCurrentPage(page));\n\n    const onRowClick = (rowData) => (setCurrentDetails(rowData));\n\n    const onDirectionChange = () => (\n        setSortDirection(sortDirection === SORT_DIRECTIONS.ASC ? SORT_DIRECTIONS.DESC : SORT_DIRECTIONS.ASC)\n    );\n\n    const onFilterApply = (value) => {\n        setFilterValue(value);\n        setCurrentPage(0);\n    };\n\n    return (\n        <div>\n            <h4 className='h4-responsive py-3 mdb-color-text'>Таблица с данными (AppTable)</h4>\n            <div className=\"btn-group\" role=\"group\" aria-label=\"Получение данных\">\n                {Object.keys(DATA_URLS).map(item => (\n                    <button className=\"btn btn-sm btn-outline-mdb-color\" key={item}\n                            onClick={() => getData(DATA_URLS[item].url)}\n                            title={DATA_URLS[item].title}>\n                        {DATA_URLS[item].name}\n                    </button>\n                ))}\n            </div>\n            {wasError ? <p className='p-2 text-danger'>Ошибка при загрузке данных.</p> : null}\n            {isLoading ?\n                <Loader/> :\n                currentDetails ? <Details details={currentDetails} unsetDetails={() => setCurrentDetails(null)}/> :\n                    <React.Fragment>\n                        {content.length > 0 ? <Filter onFilterApply={onFilterApply}/> : null}\n                        <Table\n                            data={preparedData.length > 0 ? orderBy([...preparedData[currentPage]], sortField, sortDirection) : []}\n                            currentPage={currentPage} onPageChange={onPageChange} pageCount={preparedData.length}\n                            sortField={sortField} sortDirection={sortDirection}\n                            onTableSort={onTableSort} onDirectionChange={onDirectionChange} onRowClick={onRowClick}/>\n\n                    </React.Fragment>\n            }\n        </div>\n    );\n};\n\nexport default AppTable;","import React, {useState, useRef, useEffect} from 'react';\r\nimport {KEYCODES} from '../../constants';\r\n\r\nconst LinkDrop = ({link, css, clickHandler}) => (\r\n    <a className={css.linkCss}\r\n       href={link.href} onClick={clickHandler}\r\n       key={link.key}>\r\n        {link.text}\r\n    </a>\r\n);\r\n\r\nconst ButtonDrop = ({link, css, clickHandler}) => (\r\n    <button className={css.linkCss}\r\n            type='button' onClick={() => clickHandler(link.key)}\r\n            key={link.key}>\r\n        {link.text}\r\n    </button>\r\n);\r\n\r\n/**\r\n * для передачи в props DropDown нужно подготовить массив объектов вида\r\n * {key: 'key, link: 'link', text: 'text'}\r\n */\r\nconst DropDown = ({\r\n                      data = [], togglerText = 'перейти...', ariaInfo = 'dropdown', dropdownSet = [], callback = null,\r\n                      css = {\r\n                          togglerCss: 'btn dropdown-toggle btn-block',\r\n                          linkCss: 'dropdown-item w-100'\r\n                      }\r\n                  }) => {\r\n\r\n    const [isOpen, setIsOpen] = useState(false);\r\n    const toggleContainer = useRef(null);\r\n    let timeOutId = null;\r\n    const dropOpenedClass = isOpen ? ' show ' : '';\r\n    const links = Array.isArray(data) ? data : [];\r\n\r\n    useEffect(() => {\r\n        document.addEventListener('click', onClickOutsideHandler);\r\n        document.addEventListener('keydown', onKeyPress);\r\n        return () => {\r\n            document.removeEventListener('click', onClickOutsideHandler);\r\n            document.removeEventListener('keydown', onKeyPress);\r\n        };\r\n    });\r\n\r\n    const onClickHandler = () => setIsOpen(!isOpen);\r\n\r\n    const onButtonClickHandler = (key) => {\r\n        if (callback) {\r\n            setIsOpen(false);\r\n            callback(dropdownSet[key]);\r\n        }\r\n    };\r\n\r\n    const onClickOutsideHandler = (evt) => {\r\n        if (isOpen && toggleContainer.current.contains(evt.target)) {\r\n            setIsOpen(false);\r\n        }\r\n    };\r\n\r\n    const onBlurHandler = () => {\r\n        timeOutId = setTimeout(() => {\r\n            setIsOpen(false);\r\n        }, 100);\r\n    };\r\n\r\n    const onKeyPress = (evt) => {\r\n        if (evt.keyCode === KEYCODES.ESC) {\r\n            evt.preventDefault();\r\n            setIsOpen(false);\r\n        }\r\n    };\r\n\r\n    const onFocusHandler = () => {\r\n        if (timeOutId) {\r\n            clearTimeout(timeOutId);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className='dropdown mt-1 p-1' ref={toggleContainer} onBlur={onBlurHandler}\r\n             onFocus={onFocusHandler}>\r\n            <button className={css.togglerCss} type='button'\r\n                    id={ariaInfo}\r\n                    data-toggle='dropdown' aria-haspopup='true' aria-expanded='false' onClick={onClickHandler}>\r\n                {togglerText}\r\n            </button>\r\n            <div className={'dropdown-menu w-100' + dropOpenedClass} aria-labelledby={ariaInfo}>\r\n                {links.map((link, ind) =>\r\n                    (callback ?\r\n                        <ButtonDrop key={ind} link={link} css={css} clickHandler={onButtonClickHandler}/> :\r\n                        <LinkDrop key={ind} link={link} css={css} clickHandler={onClickHandler}/>)\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default DropDown;\r\n","export const GIT_URLS = {\n    PHPTEST: {\n        name: 'Intensive-test',\n        reposUrl: '/data/testRepos.json',\n        userUrl: '/data/testUser.json',\n        title: 'Тестовые данные по интенсиву (из папки приложения)'\n    },\n    TEST: {\n        name: 'User-test',\n        reposUrl: '/data/gitRepos.json',\n        userUrl: '/data/gitUser.json',\n        title: 'Тестовые данные по пользователю github (из папки приложения).'\n    }\n    // NODETEST: {\n    //     name: 'Node-test',\n    //     reposUrl: '/data/nodeRepos.json',\n    //     userUrl: '/data/nodeUser.json',\n    //     title: 'Тестовые данные по интенсиву (из папки приложения).'\n    // },\n    // REACTTEST: {\n    //     name: 'React-test',\n    //     reposUrl: '/data/reactRepos.json',\n    //     userUrl: '/data/reactUser.json',\n    //     title: 'Тестовые данные по интенсиву (из папки приложения).'\n    // }\n};\nexport const CHART_COLORS = [\n    'rgba(58, 226, 103, 0.2)',\n    'rgba(217, 217, 194, 0.2)',\n    'rgba(89, 105, 141, 0.2)',\n    'rgba(109, 138, 224, 0.2)',\n    'rgba(54, 162, 235, 0.2)',\n    'rgba(255, 99, 132, 0.2)',\n    'rgba(175, 38, 255, 0.2)',\n    'rgba(255, 206, 86, 0.2)',\n    'rgba(75, 192, 192, 0.2)',\n    'rgba(153, 102, 255, 0.2)',\n    'rgba(255, 159, 64, 0.2)'\n];\nexport const CHART_TYPES = {\n    BAR: 'bar',\n    PIE: 'pie',\n    DOUGHNUT: 'doughnut'\n};\nexport const GIT_TYPES = {\n    INTENSIVE: 'intensive',\n    USER: 'user'\n};\nexport const LIMIT = 50;\nexport const ACADEMY_PREFIX = 'htmlacademy-';\nexport const GIT_LINK_PARTS = {\n    LINK: 'https://api.github.com/users/',\n    PAGE: '/repos?page=',\n    LIMIT: '&per_page=' + LIMIT\n};\n\nexport const GIT_HOUR_LIMIT = 60;","import {ACADEMY_PREFIX, CHART_COLORS, GIT_TYPES} from './chartconstants';\n\nconst isDigit = (str) => (str.match(/[0-9]/));\n\nexport const getIsAcademy = (text) => (text.includes(ACADEMY_PREFIX));\n\nconst parseName = (name, isAcademy) => {\n    let [academyId, project, intensiveNumber] = ['?', '?', '?'];\n    if (isAcademy) {\n        const splitted = name.split('-');\n        switch (splitted.length) {\n            case 1: {\n                [academyId, project, intensiveNumber] = ['?', splitted[0], '?'];\n                break;\n            }\n            case 2: {\n                [academyId, project, intensiveNumber] = isDigit(splitted[0]) ? [splitted[0], splitted[1], '?'] : (\n                    isDigit(splitted[1]) ? ['?', splitted[0], splitted[1]] : ['?', splitted.join('-'), '?']\n                );\n                break;\n            }\n            default: {\n                const [first, ...rest] = splitted;\n                const middle = rest.slice(0, rest.length - 1);\n                const last = rest[rest.length - 1];\n                academyId = isDigit(first) ? first : '?';\n                intensiveNumber = isDigit(last) ? last : '?';\n                project = (academyId === '?' ? first + '-' : '') + middle.join('-') + (intensiveNumber === '?' ? '-' + last : '');\n            }\n        }\n    }\n    return ({\n        academyId,\n        project,\n        intensiveNumber\n    });\n};\n\nexport const parseRepoInfo = (repo) => {\n    const isAcademy = getIsAcademy(repo.html_url);\n    const parsedName = parseName(repo.name, isAcademy);\n    return ({\n        id: repo.id,\n        name: repo.name,\n        description: repo.description,\n        academyId: parsedName.academyId,\n        project: parsedName.project,\n        intensiveNumber: parsedName.intensiveNumber,\n        homepage: repo.homepage,\n        language: repo.language\n    });\n};\n\nexport const transformUserData = (data) =>\n    ({\n        id: data.id,\n        login: data.login,\n        type: data.login.toLowerCase().includes(ACADEMY_PREFIX) ? GIT_TYPES.INTENSIVE : GIT_TYPES.USER,\n        reposCount: data.public_repos,\n        profile: data.html_url\n    });\n\nexport const transformReposData = (data) =>\n    (data.map(item => parseRepoInfo(item)));\n\nexport const getTotals = (content, totalField = 'project') => {\n    const totals = {};\n    let fieldName = '?';\n    content.forEach((repo) => {\n        fieldName = repo[totalField] ? repo[totalField] : '?';\n        totals[fieldName] = totals[fieldName] ? totals[fieldName] + 1 : 1;\n    });\n    return totals;\n};\n\nconst getDark = (colors) => (colors.map(color =>\n        (color.substring(0, color.lastIndexOf(',')) + ', 1)'))\n);\n\nexport const transformToChartData = (sourceData, type, onLegendClick) => {\n    const labels = [...sourceData.labels];\n    return ({\n        type: type,\n        data: {\n            labels: labels,\n            datasets: [{\n                label: sourceData.label,\n                data: [...sourceData.data],\n                backgroundColor: CHART_COLORS,\n                borderColor: getDark(CHART_COLORS),\n                borderWidth: 1\n            }]\n        },\n        options: {\n            scales: {\n                yAxes: [{\n                    ticks: {beginAtZero: true}\n                }]\n            },\n            onClick: (evt, item) => {\n                if (item.length >= 0 && item[0]) {\n                    onLegendClick(labels[parseInt(item[0]['_index'], 10)]);\n                }\n            }\n        }\n    });\n};\n\nexport const getPreparedData = (totals) => {\n    const keys = Object.keys(totals);\n    const labels = keys;\n    const data = keys.map(item => totals[item]);\n    return ({\n        label: 'количество репозиториев',\n        data,\n        labels\n    });\n};\n\nexport const getTotalsField = (content) => (\n    (content.user && (content.user.type === GIT_TYPES.INTENSIVE)) ? 'project' : 'language'\n);\n\nexport const getDetailsFields = (content) => (\n    (content.user && content.repos) ?\n        ((content.user.type === GIT_TYPES.INTENSIVE) ? ['academyId', 'description'] : ['name']) :\n        null\n);\n\nexport const getDropDownData = (operations) => {\n    const keys = [...Object.keys(operations)];\n    return keys.map(key => ({\n        key: key,\n        text: operations[key],\n        link: key\n    }));\n};","import React, {useRef, useEffect, useState} from 'react';\nimport {Chart} from 'chart.js';\n\nimport DropDown from '../../common/dropdown/DropDownHook';\nimport {getDropDownData, transformToChartData} from '../chartfunctions';\nimport {CHART_TYPES} from '../chartconstants';\n\nlet chart = null;\n\nconst SimpleChart = ({data = [], chartTitle, chartFooter, onLegendClick, hidden = false}) => {\n        const [chartType, setChartType] = useState(CHART_TYPES.BAR);\n        const canvas = useRef(null);\n        const chartData = transformToChartData(data, chartType, onLegendClick);\n\n        useEffect(() => {\n            drawChart();\n        });\n\n        const drawChart = () => {\n            const ctx = canvas.current.getContext('2d');\n            if (chart) {\n                chart.destroy();\n            }\n            chart = new Chart(ctx, Object.assign({}, chartData, {type: chartType}));\n        };\n\n        const onChartTypeChange = (type) => {\n            setChartType(type);\n            drawChart();\n        };\n\n        return (\n            <div className={hidden ? 'hidden' : ''}>\n                <h5 className='h5-responsive my-2'>{chartTitle}</h5>\n                <div className='d-flex mx-auto justify-content-center'>\n                    <DropDown data={getDropDownData(CHART_TYPES)} dropdownSet={CHART_TYPES}\n                              ariaInfo={'operation-dropdown'}\n                              togglerText={chartType} callback={onChartTypeChange}\n                              css={{\n                                  togglerCss: 'btn btn-light-green btn-sm dropdown-toggle',\n                                  linkCss: 'dropdown-item'\n                              }}/>\n                </div>\n                <canvas ref={canvas} id=\"simpleChart\" width=\"270\" height=\"100\"></canvas>\n                <p className='my-2'>{chartFooter}</p>\n            </div>\n        );\n    }\n;\n\nexport default SimpleChart;","import React, {useState} from 'react';\n\nconst GitUserForm = ({onGitUserClick}) => {\n    const [inputValue, setInputValue] = useState('');\n    return (\n        <div className='row justify-content-center align-items-center mx-auto p-3'>\n            <button className=\"col-6 btn btn-sm btn-outline-mdb-color mx-1\"\n                    onClick={() => onGitUserClick(inputValue.trim())}\n                    title='Получить данные по указанному пользователю GitHub'>\n                {'Построить график по: ' + inputValue}\n            </button>\n            <input className='col-5 form-control' value={inputValue} pattern='[A-Za-z0-9_-]'\n                   title='Пользователь GitHub для построения графика' placeholder='Github user'\n                   type='text' id='idGitUser' onChange={(evt) => setInputValue(evt.target.value)}/>\n        </div>\n    );\n};\n\nexport default GitUserForm;","import React, {useState} from 'react';\n\nimport Loader from '../common/loader/Loader';\nimport SimpleChart from './chart/SimpleChart';\nimport Details from '../common/details/Details';\nimport GitUserForm from './form/GitUserForm';\n\nimport {\n    getTotals,\n    getTotalsField,\n    transformUserData,\n    transformReposData,\n    getDetailsFields, getPreparedData, getIsAcademy\n} from './chartfunctions';\nimport {GIT_HOUR_LIMIT, GIT_LINK_PARTS, GIT_URLS, LIMIT} from './chartconstants';\n\n\nconst getPagesUrls = (tmpUser, url) => {\n    const isGitData = (typeof url === 'string');\n    let pages = [];\n    if (isGitData) {\n        const totalCount = tmpUser['reposCount'] ? tmpUser['reposCount'] : 0;\n        const totalPages = Math.ceil(totalCount / parseInt(LIMIT, 10)) || 1;\n\n        for (let i = 1; i <= totalPages; i++) {\n            let repoUrl = isGitData ?\n                url + GIT_LINK_PARTS.PAGE + (i) + GIT_LINK_PARTS.LIMIT :\n                url.reposUrl;\n            pages.push(repoUrl);\n        }\n    }\n    return isGitData ? pages : [url.reposUrl];\n};\n\nconst AppChart = (props) => {\n    const [isLoading, setIsLoading] = useState(false);\n    const [content, setContent] = useState({user: null, repos: []});\n    const [wasError, setWasError] = useState(null);\n    const [currentDetails, setCurrentDetails] = useState(null);\n\n    const onError = (errorMessage) => {\n        setWasError(errorMessage);\n        setContent({user: null, repos: []});\n        setIsLoading(false);\n    };\n\n    const getData = (url = GIT_URLS.TEST, canceled = false) => {\n\n        setIsLoading(true);\n        setWasError(false);\n\n        fetch(typeof url === 'string' ? url : url.userUrl)\n            .then(response => response.json())\n            .then(userData => {\n                if (!canceled) {\n                    const tmpUser = transformUserData(userData);\n                    const pages = getPagesUrls(tmpUser, url);\n\n                    if (pages.length < GIT_HOUR_LIMIT) {\n                        Promise.all(pages.map(page => fetch(page)))\n                            .then(response => Promise.all(response.map(\n                                response => response.json()\n                            )))\n                            .then(results => {\n                                const jointData = [];\n                                results.forEach(result => jointData.push(...result));\n                                setContent({user: tmpUser, repos: transformReposData(jointData)});\n                                setIsLoading(false);\n                            }).catch(error => {\n                            if (!canceled) {\n                                onError('Произошла ошибка при получении данных о репозиториях');\n                            }\n                        });\n                    } else {\n                        onError('У github для неавторизованных пользователей ограничение на 60 запросов в час. Не стоит и пытаться выполнить запрос с таким количеством страниц.');\n                    }\n                }\n\n            })\n            .catch(error => {\n                if (!canceled) {\n                    onError('Произошла ошибка при получении данных пользователя');\n                }\n            });\n    };\n\n    const onLegendClick = (something) => {\n        const fields = getDetailsFields(content);\n        if (fields) {\n            const filterField = getTotalsField(content);\n            const details = content.repos.filter(\n                repo => ((repo[filterField] === something) || (something === '?' && !repo[filterField]))).map(\n                repo => fields.reduce((rv, field) => (rv + ' ' + repo[field]), ''));\n            setCurrentDetails({details: details, title: something});\n        }\n    };\n\n    const onTotalButtonClick = () => {\n        if (content.user) {\n            const isAcademy = getIsAcademy(content.user.login);\n            const fieldName = isAcademy ? 'project' : 'language';\n            const totalDetails = {};\n            const uniqueIdCount = isAcademy ? content.repos.map(repo => repo.academyId).filter((v, i, a) => a.indexOf(v) === i).length : 0;\n            const aboutId = isAcademy ? `. Из них с неповторяющимися Id академии - ${uniqueIdCount}` : ``;\n            content.repos.forEach(repo => {\n                let key = repo[fieldName] ? repo[fieldName] : '?';\n                totalDetails[key] = totalDetails[key] ? totalDetails[key] + 1 : 1;\n            });\n            setCurrentDetails({\n                details: totalDetails,\n                title: 'Всего репозиториев: ' + content.user.reposCount + aboutId + '. Разбивка по ' + (isAcademy ? 'проектам' : 'языкам') + ':'\n            });\n        }\n    };\n\n    const onGitUserClick = (userName) => {\n        if (userName !== '' && userName.match(/[A-Za-z\\d_-]/)) {\n            getData(GIT_LINK_PARTS.LINK + userName);\n        } else {\n            setWasError('В имени пользователя допустимы только латинские символы, цифры, дефис и подчеркивание');\n        }\n    };\n\n    return (\n        <div>\n            <h4 className='h4-responsive'>AppChart</h4>\n            <div className=\"btn-group mt-2\" role=\"group\" aria-label=\"Получение данных\">\n                {Object.keys(GIT_URLS).map(item => (\n                    <button className=\"btn btn-sm btn-outline-mdb-color mx-1 cloudy-knoxville-gradient\" key={item}\n                            onClick={() => getData(GIT_URLS[item])}\n                            title={GIT_URLS[item].title}>\n                        {GIT_URLS[item].name}\n                    </button>\n                ))}\n            </div>\n            <GitUserForm onGitUserClick={onGitUserClick}/>\n\n            {isLoading ?\n                <Loader/> :\n                <React.Fragment>\n                    {wasError ?\n                        <p className='mt-2 text-danger d'><small>{wasError}</small></p> :\n                        currentDetails ?\n                            <Details details={currentDetails.details} title={currentDetails.title}\n                                     unsetDetails={() => setCurrentDetails(null)}/> :\n                            <React.Fragment>\n                                <SimpleChart\n                                    data={getPreparedData(getTotals(content.repos, getTotalsField(content)))}\n                                    chartTitle={'Диаграмма ' + (content.user ? content.user.login : '')}\n                                    chartFooter={content.user ? 'Всего публичных репозиториев: ' + content.user['reposCount'] : ''}\n                                    onLegendClick={onLegendClick}\n                                    hidden={!(content.user)}/>\n                                <button\n                                    className={'btn btn-sm btn-mdb-color ' + (content.user ? 'd-inline-block' : 'd-none')}\n                                    type='button'\n                                    onClick={onTotalButtonClick}>\n                                    Итоги в виде таблицы\n                                </button>\n                            </React.Fragment>\n                    }\n                </React.Fragment>\n            }\n        </div>\n    );\n};\n\nexport default AppChart;","import React from 'react';\n\nclass ErrorBoundary extends React.Component {\n    constructor (props) {\n        super(props);\n        this.state = {wasError: false};\n    }\n\n    componentDidCatch () {\n        this.setState({wasError: true});\n    }\n\n    render () {\n        if (this.state.wasError) {\n            return (\n                <div className='alert alert-primary'>\n                    <h4>Произошла ошибка...</h4>\n                    <p>Часть функциональности отключена. Возможная причина - недоступность карт.</p>\n                </div>\n            )\n        } else {\n            return (this.props.children)\n        }\n    }\n\n}\n\nexport default ErrorBoundary;","import React from 'react';\nimport {TASKS} from './constants';\nimport AppTable from './apptable/AppTable';\nimport AppChart from './appchart/AppChart';\n// import AppMap from './appmap/AppMap';\nimport ErrorBoundary from './errorboundary/ErrorBoundary';\n\nconst AppSwitcher = ({component}) => {\n    let rv = null;\n    switch (component) {\n        case TASKS.CHART: {\n            rv = <AppChart/>;\n            break;\n        }\n        case TASKS.TABLE: {\n            rv = <AppTable/>;\n            break;\n        }\n        case TASKS.MAP: {\n            // rv = (<ErrorBoundary> <AppMap/> </ErrorBoundary>);\n            rv = (<ErrorBoundary> <button className='btn btn-mdb-color btn-sm' disabled>временно отключено</button> </ErrorBoundary>);\n            break;\n        }\n        default:\n            rv = <React.Fragment>\n                    <p className='mt-3'>Просто найденные на просторах интернета задания по React. </p>\n                    <p>Без какой-либо общей идеи и реальной цели.</p>\n                    <p>Исключительно для внесения разнообразия в учебные задачи.</p>\n                </React.Fragment>;\n    }\n    return rv;\n};\n\nexport default AppSwitcher;","import React, {useState} from 'react';\n\nimport AppSwitcher from './AppSwitcher';\nimport {TASKS_ORDER} from './constants';\n\nfunction App() {\n    const [task, setTask] = useState(0);\n    return (\n        <div className=\"container py-3\">\n            <div className='col-12 col-md-10 mx-auto text-center'>\n\n                <header>\n                    <h3 className='h3-responsive text-center'>Разные задачи c использованием React</h3>\n\n                    {TASKS_ORDER.map((item, ind) =>\n                        <button className={'btn btn-sm ' + (ind === task ? '' : ' btn-mdb-color ')} key={ind} type='button'\n                                title={TASKS_ORDER[ind]['comment']}\n                                onClick={() => setTask(ind)}>{TASKS_ORDER[ind]['title']}</button>\n                    )}\n\n                    <hr/>\n                    <p><small>{TASKS_ORDER[task]['comment']}</small></p>\n                    <hr/>\n                </header>\n\n                <main>\n                    <AppSwitcher component={TASKS_ORDER[task]}/>\n                </main>\n\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './mdbcss/bootstrap.min.css';\nimport './mdbcss/mdb.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}